import pytest
import allure
import csv
import time
from playwright.sync_api import Page
from utils.page_analysis import analyze_result_page
from utils.form_interaction import fill_field, select_field, select_genres


def load_test_data():
    test_data = []
    with open("test_data/f1_advanced_search_test_data.csv", encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            test_data.append(row)
    return test_data


@pytest.mark.f1
@pytest.mark.parametrize("test_case", load_test_data())
@allure.title("–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ (f1)")
@allure.description("–§–æ—Ä–º–∞ f1: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ–¥, –∂–∞–Ω—Ä, —Å—Ç—Ä–∞–Ω–∞ –∏ –ø—Ä.)")
def test_advanced_search_f1(page: Page, test_case):
    page.goto("https://www.kinopoisk.ru/s/", wait_until="load")
    page.wait_for_selector("form[name='film_search']", timeout=30000)
    print(f"\nüîé –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {test_case}")

    fill_field(page, "f1", "m_act[find]", test_case["–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"])
    fill_field(page, "f1", "m_act[year]", test_case["–ì–æ–¥"])
    fill_field(page, "f1", "m_act[box]", test_case["–°—É–º–º–∞ —Å–±–æ—Ä–æ–≤"])
    fill_field(page, "f1", "m_act[actor]", test_case["–ê–∫—Ç–µ—Ä"])
    fill_field(page, "f1", "m_act[cast]", test_case["–°–æ–∑–¥–∞—Ç–µ–ª–∏"])

    select_field(page, "f1", "m_act[from_year]", test_case["–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–æ–¥–æ–≤"])
    select_field(page, "f1", "m_act[to_year]", test_case["–ö–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–æ–¥–æ–≤"])
    select_field(page, "f1", "m_act[country]", test_case["–°—Ç—Ä–∞–Ω–∞"])

    raw_genre = test_case.get("–ñ–∞–Ω—Ä", "").strip()
    genre_values = [v.strip() for v in raw_genre.split(",") if v.strip() and v != "-"]
    if genre_values:
        select_genres(page, "f1", genre_values)

    select_field(page, "f1", "m_act[company]", test_case["–ü—Ä–æ–∫–∞—Ç—á–∏–∫"])
    select_field(page, "f1", "m_act[mpaa]", test_case["MPAA —Ä–µ–π—Ç–∏–Ω–≥"])
    select_field(page, "f1", "m_act[premier_month]", test_case["–ú–µ—Å—è—Ü –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field(page, "f1", "m_act[premier_year]", test_case["–ì–æ–¥ –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field(page, "f1", "m_act[premier_type]", test_case["–†–µ–≥–∏–æ–Ω –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field(page, "f1", "m_act[box_vector]", test_case["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–æ–≤"])
    select_field(page, "f1", "m_act[box_type]", test_case["–†–µ–≥–∏–æ–Ω —Å–±–æ—Ä–æ–≤"])
    select_field(page, "f1", "m_act[content_find]", test_case["–ß—Ç–æ –∏—Å–∫–∞—Ç—å?"])

    search_button = page.locator("form[name='film_search'] .el_18.submit.nice_button")
    if not search_button.is_enabled():
        notice_block = page.locator("#ui_notice_container .tdtext", has_text="—É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç")
        if notice_block.is_visible():
            pytest.xfail("‚ùå –ü–æ—è–≤–∏–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º–∞–∫—Å. 10 –ª–µ—Ç)")
        else:
            pytest.xfail("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã")

    search_button.click()
    page.wait_for_load_state("load")
    if page.url == "https://www.kinopoisk.ru/s/":
        pytest.xfail("–§–æ—Ä–º–∞ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞: –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ /s/")
    time.sleep(3)

    analyze_result_page(page, test_case, mode="f1")