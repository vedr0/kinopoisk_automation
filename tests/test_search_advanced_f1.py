import pytest
from playwright.sync_api import Page, expect
import csv
import time


# –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV-—Ñ–∞–π–ª–∞
def load_test_data():
    test_data = []
    with open("test_data/f1_advanced_search_test_data.csv", encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            test_data.append(row)
    return test_data


@pytest.mark.parametrize("test_case", load_test_data())
def test_advanced_search_f1(page: Page, test_case):
    page.goto("https://www.kinopoisk.ru/s/", wait_until="load")
    page.wait_for_selector("form[name='film_search']", timeout=30000)

    print(f"\nüîé –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {test_case}")

    search_form = page.locator("form[name='film_search']")
    search_button = search_form.locator(".el_18.submit.nice_button")

    try:
        page.wait_for_selector("form[name='film_search']", timeout=40000)
        print("‚úÖ –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception:
        pytest.fail("‚ùå –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å!")


    def fill_field(field_name, value):
        if value and value != "-":
            try:
                field = search_form.locator(f"[name='{field_name}']")
                page.wait_for_selector(f"[name='{field_name}']", timeout=15000)
                expect(field).to_be_visible(timeout=15000)

                if field_name in ["m_act[find]", "m_act[year]"]:
                    field.click()
                    field.type(value, delay=100)  # —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
                    field.evaluate("el => el.blur()")  # –ø–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞
                    print(f"üîß –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∏ blur –Ω–∞ –ø–æ–ª–µ '{field_name}'")
                else:
                    field.fill(value)

                print(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ '{field_name}': {value}")
            except Exception:
                pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ '{field_name}'")

    def select_field(field_name, value):
        if value and value != "-":
            try:
                field = search_form.locator(f"[name='{field_name}']")
                page.wait_for_selector(f"[name='{field_name}']", timeout=15000)
                expect(field).to_be_visible(timeout=15000)
                available_values = [opt.get_attribute("value") for opt in field.locator("option").all()]
                if value not in available_values:
                    pytest.xfail(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{value}' –¥–ª—è –ø–æ–ª—è '{field_name}'")
                field.select_option(value)
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–æ–ª–µ '{field_name}': {value}")
            except Exception as e:
                pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ '{field_name}': {e}")

    def select_genres(page: Page, values: list[str]):
        select = page.locator("select[name='m_act[genre][]']")
        page.wait_for_selector("select[name='m_act[genre][]']", timeout=15000)
        expect(select).to_be_visible(timeout=15000)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        available_values = select.locator("option").evaluate_all("opts => opts.map(o => o.value)")
        valid_values = [v for v in values if v in available_values]

        if not valid_values:
            pytest.xfail(f"–ù–∏ –æ–¥–∏–Ω –∏–∑ –∂–∞–Ω—Ä–æ–≤ {values} –Ω–µ –≤–∞–ª–∏–¥–µ–Ω ‚Äî —Ñ–æ—Ä–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è")

        select.evaluate("el => Array.from(el.options).forEach(o => o.selected = false)")
        select.select_option(valid_values)
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –∂–∞–Ω—Ä—ã: {valid_values}")

    def analyze_result_page(page: Page, test_case: dict):
        try:
            # üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∞
            country_value = test_case.get("–°—Ç—Ä–∞–Ω–∞", "").strip()
            has_only_country = (
                    country_value and country_value != "-"
                    and all(
                v.strip() in ("", "-")
                for k, v in test_case.items()
                if k != "–°—Ç—Ä–∞–Ω–∞"
            )
            )
            if has_only_country:
                expected_url_part = f"/lists/m_act[country]/{country_value}/"
                if expected_url_part in page.url:
                    print(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ: {page.url}")
                    return
                else:
                    pytest.xfail(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ {expected_url_part}, –Ω–æ URL: {page.url}")

            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–∏–ª—å–º–∞)
            if "/film/" in page.url:
                print(f"‚úÖ –§–∏–ª—å–º –Ω–∞–π–¥–µ–Ω: {page.url}")
                return

            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ (–æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ /s/)
            if page.url == "https://www.kinopoisk.ru/s/":
                pytest.xfail("–§–æ—Ä–º–∞ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞: –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ /s/")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if page.locator("h2.textorangebig", has_text="–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ").is_visible():
                pytest.xfail(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç–∞: '{test_case['–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞']}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
            header_similar = page.locator("p.header", has_text="–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –∏—â–µ—Ç–µ:")
            if header_similar.is_visible():
                print("‚úÖ –û—Ç–∫—Ä—ã–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤")
                return

            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            print("üîç –û—Ç–ª–∞–¥–∫–∞: p.header –≤–∏–¥–∏–º?", header_similar.is_visible())
            pytest.fail(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. URL: {page.url}")

        except Exception as e:
            pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

    fill_field("m_act[find]", test_case["–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"])
    fill_field("m_act[year]", test_case["–ì–æ–¥"])
    fill_field("m_act[box]", test_case["–°—É–º–º–∞ —Å–±–æ—Ä–æ–≤"])
    fill_field("m_act[actor]", test_case["–ê–∫—Ç–µ—Ä"])
    fill_field("m_act[cast]", test_case["–°–æ–∑–¥–∞—Ç–µ–ª–∏"])

    select_field("m_act[from_year]", test_case["–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–æ–¥–æ–≤"])
    select_field("m_act[to_year]", test_case["–ö–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–æ–¥–æ–≤"])
    select_field("m_act[country]", test_case["–°—Ç—Ä–∞–Ω–∞"])
    # –ñ–∞–Ω—Ä—ã: –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ CTRL
    raw_genre = test_case.get("–ñ–∞–Ω—Ä", "").strip()
    genre_values = [v.strip() for v in raw_genre.split(",") if v.strip() and v != "-"]
    if genre_values:
        select_genres(page, genre_values)
    select_field("m_act[company]", test_case["–ü—Ä–æ–∫–∞—Ç—á–∏–∫"])
    select_field("m_act[mpaa]", test_case["MPAA —Ä–µ–π—Ç–∏–Ω–≥"])
    select_field("m_act[premier_month]", test_case["–ú–µ—Å—è—Ü –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field("m_act[premier_year]", test_case["–ì–æ–¥ –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field("m_act[premier_type]", test_case["–†–µ–≥–∏–æ–Ω –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field("m_act[box_vector]", test_case["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–æ–≤"])
    select_field("m_act[box_type]", test_case["–†–µ–≥–∏–æ–Ω —Å–±–æ—Ä–æ–≤"])
    select_field("m_act[content_find]", test_case["–ß—Ç–æ –∏—Å–∫–∞—Ç—å?"])

    if not search_button.is_enabled():
        notice_block = page.locator("#ui_notice_container .tdtext", has_text="—É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç")
        if notice_block.is_visible():
            pytest.xfail("‚ùå –ü–æ—è–≤–∏–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–º–∞–∫—Å. 10 –ª–µ—Ç)")
        else:
            pytest.xfail("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã")

    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –∫–ª–∏–∫–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    search_button.click()
    page.wait_for_load_state("load")
    if page.url == "https://www.kinopoisk.ru/s/":
        pytest.xfail("–§–æ—Ä–º–∞ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞: –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ /s/")
    time.sleep(3)

    analyze_result_page(page, test_case)
