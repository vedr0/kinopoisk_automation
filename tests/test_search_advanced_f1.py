import pytest
from playwright.sync_api import Page, expect
import csv
import time


# –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV-—Ñ–∞–π–ª–∞
def load_test_data():
    test_data = []
    with open("test_data/advanced_search_test_data.csv", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            test_data.append(row)
    return test_data


@pytest.mark.parametrize("test_case", load_test_data())
def test_advanced_search_f1(page: Page, test_case):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    page.goto("https://www.kinopoisk.ru/s/")
    page.wait_for_load_state("networkidle")
    # time.sleep(3)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å
    print(f"\nüîé –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {test_case}")

    # –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ä–º—É f1
    search_form = page.locator("form[name='film_search']")
    search_button = search_form.locator(".el_18.submit.nice_button")

    # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
    try:
        page.wait_for_selector("form[name='film_search']", timeout=40000)
        print("‚úÖ –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception:
        pytest.fail("‚ùå –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å!")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    def fill_field(field_name, value):
        if value and value != "-":
            try:
                field = search_form.locator(f"[name='{field_name}']")
                page.wait_for_selector(f"[name='{field_name}']", timeout=15000)
                expect(field).to_be_visible(timeout=15000)
                field.fill(value)
                print(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ '{field_name}': {value}")
                # time.sleep(1)
            except Exception:
                pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ '{field_name}'")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–∑ <select>
    def select_field(field_name, value):
        if value and value != "-":
            try:
                field = search_form.locator(f"[name='{field_name}']")
                page.wait_for_selector(f"[name='{field_name}']", timeout=15000)
                expect(field).to_be_visible(timeout=15000)

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                available_values = [opt.get_attribute("value") for opt in field.locator("option").all()]
                if value not in available_values:
                    pytest.fail(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ '{value}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ '{field_name}'")

                field.select_option(value)
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–æ–ª–µ '{field_name}': {value}")
                # time.sleep(1)
            except Exception as e:
                pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ '{field_name}': {e}")

    # –§–∏–∫—Å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∂–∞–Ω—Ä–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
    def select_genre(value):
        if value and value != "-":
            try:
                field = search_form.locator("[name='m_act[genre][]']")
                page.wait_for_selector("[name='m_act[genre][]']", timeout=15000)
                expect(field).to_be_visible(timeout=15000)
                field.select_option(value)
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω –∂–∞–Ω—Ä: {value}")
                # time.sleep(1)
            except Exception:
                pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞ '{value}'")

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    fill_field("m_act[find]", test_case["–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"])
    fill_field("m_act[year]", test_case["–ì–æ–¥"])
    fill_field("m_act[box]", test_case["–°—É–º–º–∞ —Å–±–æ—Ä–æ–≤"])
    fill_field("m_act[actor]", test_case["–ê–∫—Ç–µ—Ä"])
    fill_field("m_act[cast]", test_case["–°–æ–∑–¥–∞—Ç–µ–ª–∏"])

    # –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
    select_field("m_act[from_year]", test_case["–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–æ–¥–æ–≤"])
    select_field("m_act[to_year]", test_case["–ö–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–æ–¥–æ–≤"])
    select_field("m_act[country]", test_case["–°—Ç—Ä–∞–Ω–∞"])
    select_genre(test_case["–ñ–∞–Ω—Ä"])
    select_field("m_act[company]", test_case["–ü—Ä–æ–∫–∞—Ç—á–∏–∫"])
    select_field("m_act[mpaa]", test_case["MPAA —Ä–µ–π—Ç–∏–Ω–≥"])
    select_field("m_act[premier_month]", test_case["–ú–µ—Å—è—Ü –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field("m_act[premier_year]", test_case["–ì–æ–¥ –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field("m_act[premier_type]", test_case["–†–µ–≥–∏–æ–Ω –ø—Ä–µ–º—å–µ—Ä—ã"])
    select_field("m_act[box_vector]", test_case["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–æ–≤"])
    select_field("m_act[box_type]", test_case["–†–µ–≥–∏–æ–Ω —Å–±–æ—Ä–æ–≤"])
    select_field("m_act[content_find]", test_case["–ß—Ç–æ –∏—Å–∫–∞—Ç—å?"])

    time.sleep(3)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º
    # if not search_button.is_enabled():
    #     pytest.fail("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π!")
    try:
        expect(search_button).to_be_enabled(timeout=3000)
    except:
        pytest.fail("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π!")

    # –ö–ª–∏–∫–∞–µ–º "–ø–æ–∏—Å–∫"
    search_button.click()

    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    page.wait_for_load_state("networkidle")
    # time.sleep(3)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if "/film/" in page.url:
        print(f"‚úÖ –§–∏–ª—å–º –Ω–∞–π–¥–µ–Ω: {page.url}")
        assert True

    elif page.url == "https://www.kinopoisk.ru/s/":
        pytest.xfail("–§–æ—Ä–º–∞ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞: –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ /s/")

    else:
        try:
            # "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            no_results = page.locator("h2.textorangebig", has_text="–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            if no_results.count() > 0 and no_results.first.is_visible():
                pytest.xfail(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç–∞: '{test_case['–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞']}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # "–ü–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã"
            suggestions_header = page.locator("p.header", has_text="–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –∏—â–µ—Ç–µ:")
            results_link = page.locator("p.header a", has_text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            if suggestions_header.count() > 0 and results_link.count() > 0:
                print("‚úÖ –û—Ç–∫—Ä—ã–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤")
                assert True

            # –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –æ—à–∏–±–∫–∞
            pytest.fail(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. URL: {page.url}")

        except Exception as e:
            pytest.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
