import pytest
from playwright.sync_api import Page, expect
import csv


def load_test_data():
    test_data = []
    with open("test_data/f2_creator_search_test_data.csv", encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            test_data.append(row)
    return test_data


@pytest.mark.parametrize("test_case", load_test_data())
def test_creator_search_f2(page: Page, test_case):
    page.goto("https://www.kinopoisk.ru/s/", wait_until="load")
    page.wait_for_selector("form[name='keyword_search']", timeout=20000)

    print(f"\nüîé –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {test_case}")

    search_form = page.locator("form[name='keyword_search']")
    search_button = search_form.locator("#btn_search_6")

    def fill_creator_pair(index: int, role: str, name: str):
        if role and role != "-":
            role_select = search_form.locator(f"#cr_search_field_{index}_select")
            expect(role_select).to_be_visible()
            role_select.select_option(role)
            print(f"‚úÖ –†–æ–ª—å {index}: {role}")

        if name and name.strip():
            name_input = search_form.locator(f"#cr_search_field_{index}")
            expect(name_input).to_be_visible()
            name_input.click()
            name_input.type(name, delay=100)

            # üõ°Ô∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ type()
            if not page.url.startswith("https://www.kinopoisk.ru/s/"):
                pytest.xfail(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ '{name}' (role: {role}) ‚Äî –ø–æ—Å–ª–µ type(): {page.url}")

            page.keyboard.press("ArrowDown")
            page.keyboard.press("Enter")
            page.wait_for_timeout(1000)

            # üõ°Ô∏è –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ø–µ—Ä–µ–¥ blur()
            if not page.url.startswith("https://www.kinopoisk.ru/s/"):
                pytest.xfail(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–∑ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ '{name}' (role: {role}): {page.url}")

            name_input.evaluate("el => el.blur()")
            print(f"‚úÖ –ò–º—è {index}: {name}")

    # üöÄ –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º "–†–æ–ª—å/–ò–º—è" –≤ CSV
    index = 1
    while True:
        role_key = f"–†–æ–ª—å {index}"
        name_key = f"–ò–º—è {index}"
        if role_key not in test_case and name_key not in test_case:
            break

        role = test_case.get(role_key, "").strip()
        name = test_case.get(name_key, "").strip()

        if not role and not name:
            break

        fill_creator_pair(index, role, name)
        index += 1

    page.evaluate("CheckFields(6)")

    if not search_button.is_enabled():
        pytest.xfail("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")

    search_button.click()
    page.wait_for_load_state("load")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page.url == "https://www.kinopoisk.ru/s/":
        pytest.xfail("‚ùå –§–æ—Ä–º–∞ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ ‚Äî –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ /s/")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if page.locator("h2.textorangebig", has_text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...").is_visible():
        print("‚ùï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if page.locator("p.header", has_text="–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –∏—â–µ—Ç–µ:").is_visible():
        print("üîÅ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∏–ª—å–º–∞ (–æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    if "/film/" in page.url:
        print(f"üé¨ –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω —Ñ–∏–ª—å–º: {page.url}")
        return

    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {page.url}")
