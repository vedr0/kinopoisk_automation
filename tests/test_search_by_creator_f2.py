import pytest
import allure
import csv
import time
from playwright.sync_api import Page, expect
from utils.page_analysis import analyze_result_page


@allure.step("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV")
def load_test_data():
    test_data = []
    with open("test_data/f2_creator_search_test_data.csv", encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            test_data.append(row)
    return test_data

@pytest.mark.f2
@pytest.mark.parametrize("test_case", load_test_data())
@allure.title("–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º/–∞–∫—Ç–µ—Ä–∞–º (f2)")
@allure.description("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º/–∞–∫—Ç–µ—Ä–∞–º (—Ä–µ–∂–∏—Å—Å–µ—Ä, –∞–∫—Ç–µ—Ä –∏ —Ç.–¥.) —á–µ—Ä–µ–∑ f2")
def test_creator_search_f2(page: Page, test_case):
    page.goto("https://www.kinopoisk.ru/s/", wait_until="load")
    page.wait_for_selector("form[name='keyword_search']", timeout=20000)

    print(f"\nüîé –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {test_case}")

    search_form = page.locator("form[name='keyword_search']")
    search_button = search_form.locator("#btn_search_6")

    @allure.step("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞—Ä—ã —Ä–æ–ª—å + –∏–º—è")
    def fill_creator_pair(index: int, role: str, name: str):
        if role and role != "-":
            role_select = search_form.locator(f"#cr_search_field_{index}_select")
            expect(role_select).to_be_visible()
            role_select.select_option(role)
            print(f"‚úÖ –†–æ–ª—å {index}: {role}")

        if name and name.strip():
            name_input = search_form.locator(f"#cr_search_field_{index}")
            expect(name_input).to_be_visible()
            name_input.click()
            name_input.type(name, delay=100)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
            if not page.url.startswith("https://www.kinopoisk.ru/s/"):
                pytest.xfail(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ '{name}' (role: {role}) ‚Äî –ø–æ—Å–ª–µ type(): {page.url}")

            # ‚è≥ –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–∏–∫–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ (–≤—Ä—É—á–Ω—É—é, —Ç.–∫. –æ–Ω –Ω–µ –ª–æ–≤–∏—Ç—Å—è –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º)
            time.sleep(2)
            page.keyboard.press("ArrowDown")
            time.sleep(2)
            page.keyboard.press("Enter")
            page.wait_for_timeout(1000)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–∑ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
            if not page.url.startswith("https://www.kinopoisk.ru/s/"):
                pytest.xfail(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–∑ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ '{name}' (role: {role}): {page.url}")

            name_input.evaluate("el => el.blur()")
            print(f"‚úÖ –ò–º—è {index}: {name}")

    # üîÅ –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä "–†–æ–ª—å/–ò–º—è", –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤ CSV
    index = 1
    while True:
        role_key = f"–†–æ–ª—å {index}"
        name_key = f"–ò–º—è {index}"
        if role_key not in test_case and name_key not in test_case:
            break

        role = test_case.get(role_key, "").strip()
        name = test_case.get(name_key, "").strip()

        if not role and not name:
            break

        fill_creator_pair(index, role, name)
        index += 1

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    page.evaluate("CheckFields(6)")

    if not search_button.is_enabled():
        pytest.xfail("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")

    search_button.click()
    page.wait_for_load_state("load")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
    analyze_result_page(page, test_case, mode="f2")